{"version":3,"sources":["cards/ClockCard.js","cards/BikeCard.js","cards/BusCard.js","cards/BikeCardV2.js","App.js","serviceWorker.js","index.js"],"names":["ClockCard","Grid","className","compressor","format","ticking","BikeCard","dayjs","extend","relativeTime","BusCard","useState","nextBus","setNextBus","saturdayX28Schedule","sundayX28Schedule","weekdayX28Schedule","refresh","nextBusTime","day","find","time","nextBusSentence","nextBusTimeObject","startOf","add","split","get","to","useEffect","interval","setInterval","clearInterval","BikeCardV2","stations","setStations","stationInfo","setStationInfo","Map","ReactMapboxGl","accessToken","fetch","then","response","json","data","fetchStationInfo","colors","BikeMarker","styled","div","props","cssString","enum","num","random","css","stopAnimating","breathing","keyframes","me","id","style","containerStyle","height","width","center","zoom","bearing","map","station","index","lon","lat","console","log","station_id","coordinates","num_ebikes_available","num_bikes_available","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fbb05d77.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Clock from 'react-live-clock';\nimport ReactFitText from 'react-fittext'\nimport './styles/ClockCard.css';\nfunction ClockCard () {\n    return ( \n            <Grid className=\"clockCard\">\n            <ReactFitText compressor={0.35}>\n            <h1 className=\"clock\">\n            <Clock format=\"h:mm\" ticking={true}/>\n            </h1>\n            </ReactFitText>\n            </Grid>\n    );\n}\n\nexport default ClockCard;","import React, {useState, useEffect} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport './styles/BikeCard.css';\nfunction BikeCard () {\n    const [iframeKey, setIframeKey] = useState(0);\n    const [hasSetMapStorage, setHasSetMapStorage] = useState(false);\n    //refresh every ten minutes\n    setInterval(() => {setIframeKey(iframeKey + 1)}, 600000)\n\n    const setMapStorage = (key, value) => {\n        setTimeout(() => {\n        document.getElementById(\"bikeMap\").srcdoc = \n        document.getElementById(\"bikeMap\").srcdoc.slice(0, 85) + \n        \"<script>localStorage.setItem(\\\"\" + key + \"\\\",\\\"\" + value +  \"\\\")</script>\" + \n        document.getElementById(\"bikeMap\").srcdoc.slice(\n            85,\n            document.getElementById(\"bikeMap\").srcdoc.length\n        )\n        console.log('ran')\n        }, 5000)\n    }\n\n    useEffect(()=> {\n        setMapStorage(\"edMapStorage_latitude\",\"40.7287750262191\")\n        setMapStorage(\"edMapStorage_longitude\",\"-73.98378775559905\")\n        setMapStorage(\"edMapStorage_filterValues\",\"{\\\"bike-lanes\\\":false}\")\n        setMapStorage(\"edMapStorage_zoom\",\"15.5\")\n        setHasSetMapStorage(true)\n    }, [hasSetMapStorage])\n\n    \n    return ( \n            <div className=\"bikeMap\">\n            <iframe\n                is=\"x-frame-bypass\"\n                id=\"bikeMap\"\n                className=\"bikeMap\"\n                key={iframeKey}\n                src=\"https://member.citibikenyc.com/map/\"\n                style={{height:'100%', width:'100%', border:'none'}}\n            />\n            </div>\n    );\n}\n\nexport default BikeCard;","import React, {useState, useEffect} from 'react';\nimport dayjs from 'dayjs'\nimport { find } from 'lodash'\nimport './styles/BusCard.css';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport ReactFitText from 'react-fittext'\n\n// async function callMtaAPI() {\n//     const url = \"http://bustime.mta.info/api/siri/stop-monitoring.json?key=895127ba-0b61-4abf-8c51-d7b71ef0590a&version=2&OperatorRef=MTA&MonitoringRef=404197\"\n//     xhttp.onreadystatechange = function() {\n//         if (this.readyState == 4 && this.status == 200) {\n//           this.responseText;\n//         }\n//       };\n//     xhttp.open(\"GET\", url, true);\n//     xhttp.send();\n\n// }\n\ndayjs.extend(relativeTime)\n\nfunction BusCard () {\n    const [nextBus, setNextBus] = useState(\"\");\n\n    const saturdayX28Schedule = [\n        \"07:52\",\n        \"08:51\",\n        \"09:26\",\n        \"09:56\",\n        \"10:26\",\n        \"10:56\",\n        \"11:26\",\n        \"12:00\",\n        \"12:35\",\n        \"13:20\",\n        \"14:20\",\n        \"15:21\",\n        \"16:21\",\n        \"17:05\",\n        \"17:37\",\n        \"18:07\",\n        \"18:36\",\n        \"19:06\",\n        \"19:35\",\n        \"20:05\",\n        \"20:37\",\n        \"21:22\",\n        \"10:21\"\n    ]\n\n    const sundayX28Schedule = [\n        \"08:50\",\n        \"09:50\",\n        \"10:50\",\n        \"11:52\",\n        \"11:42\",\n        \"13:34\",\n        \"14:09\",\n        \"14:39\",\n        \"15:09\",\n        \"15:39\",\n        \"16:10\",\n        \"16:41\",\n        \"17:11\",\n        \"17:41\",\n        \"18:11\",\n        \"18:41\",\n        \"19:10\",\n        \"19:44\",\n        \"20:23\",\n        \"21:23\"\n    ]\n\n    const weekdayX28Schedule = [\n        \"09:34\",\n        \"10:34\",\n        \"11:34\",\n        \"12:30\",\n        \"13:20\",\n        \"14:05\",\n        \"14:45\",\n        \"15:15\",\n        \"15:35\",\n        \"15:50\",\n        \"16:16\",\n        \"16:36\",\n        \"16:55\",\n        \"17:11\",\n        \"17:27\",\n        \"17:46\",\n        \"18:09\",\n        \"18:39\",\n        \"18:51\",\n        \"19:05\",\n        \"19:21\",\n        \"19:40\",\n        \"20:00\",\n        \"20:22\",\n        \"20:49\",\n        \"21:18\",\n        \"22:31\",\n        \"23:46\"\n    ]\n\n    const refresh = () => {\n        let  nextBusTime = \"\";\n        switch(dayjs().day()){\n            case 0:\n                nextBusTime = find(sundayX28Schedule, time => dayjs().format(\"HH:mm\") < time)\n                break;\n            case 1:\n                nextBusTime = find(saturdayX28Schedule, time => dayjs().format(\"HH:mm\") < time)\n                break;\n            default:\n                nextBusTime = find(weekdayX28Schedule, time => dayjs().format(\"HH:mm\") < time)\n        }\n        let nextBusSentence = \"\"\n        if(!nextBusTime) {\n            nextBusSentence = \"tomorrow\"\n        } else {\n            const nextBusTimeObject = dayjs().startOf('day').add(nextBusTime.split(\":\")[0], 'hours').add(nextBusTime.split(\":\")[1], 'minutes').add(dayjs().get('second'), 'second')\n            nextBusSentence = dayjs().to(nextBusTimeObject)\n        }\n        setNextBus(nextBusSentence)\n    }\n\n    useEffect(() => {\n        refresh()\n        const interval = setInterval(refresh, 1000)\n        return () => clearInterval(interval);\n    }, [])\n\n    return ( \n            <div className=\"busTime\">\n                <ReactFitText compressor={0.8}>\n               <h1 className=\"busSentence\">The next x28 will arrive {nextBus}</h1>\n               </ReactFitText>\n            </div>\n    );\n}\n\nexport default BusCard;","import React, {useState, useEffect} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport './styles/BikeCard.css';\nimport ReactMapboxGl, {Feature, Layer, Marker, MapContext} from 'react-mapbox-gl';\nimport mapboxgl from 'mapbox-gl'\nimport { random } from 'lodash';\nimport styled, {css, keyframes} from 'styled-components'\nfunction BikeCardV2 () {\n    const [stations, setStations] = useState([])\n    const [stationInfo, setStationInfo] = useState([])\n    const [shouldFetch, setShouldFetch] = useState(true)\n    const Map = ReactMapboxGl({\n        accessToken: \"pk.eyJ1IjoibWF4YmVydCIsImEiOiJjaXI2eHF6bjMwMHIzZ2FtOXlsbzRuYWVpIn0.DQhYl-C662jhIKZZN-taXA\",\n      });\n\n    useEffect(() => {\n        fetch('https://gbfs.citibikenyc.com/gbfs/en/station_information.json')\n            .then(response => response.json())\n            .then(data => setStations(data.data.stations));\n            }, [])\n\n    useEffect(() => {\n        const fetchStationInfo = () => {\n            fetch('https://gbfs.citibikenyc.com/gbfs/en/station_status.json')\n            .then(response => response.json())\n            .then(data => setStationInfo(data.data.stations))\n        }\n        fetchStationInfo()\n        const interval = setInterval(fetchStationInfo, 60000)\n        return () => clearInterval(interval);\n    }, [])\n\n    const colors = [\"cfbae1\",\"48cae4\",\"0096c7\",\"023e8a\",\"03045e\"]\n\n    const BikeMarker =  styled.div`\n            width:10px;\n            height:10px;\n            ${props => {\n                var cssString = ''\n                cssString += `background-color: #${props.enum < 4 ? colors[props.enum % 4] : colors[4]};`\n                cssString += `\n                    width:${props.num * 1.5 + 10}px;\n                    height:${props.num * 1.5+ 10}px;\n                `\n                if(random(0,1)){\n                    cssString += `border-radius: 50%;`\n                }\n                cssString += `animation-delay: ${random(0,10)};`\n                return css`${cssString}`\n             }\n            };\n            ${props => {\n                const stopAnimating = random(20, 80)\n                const breathing = keyframes`\n                    0% {\n                        transform: scale(1);\n                    }\n                    ${stopAnimating / 2}% {\n                        transform: scale(1.5);\n                    }\n                    ${stopAnimating}% {\n                        transform: scale(1);\n                    100% {\n                        transform: scale(1);\n                    }\n                `\n                return css`animation: ${breathing} ${random(1,10,true)+\"s\"} linear infinite;`\n            }}\n        `\n    const me = [-73.981530, 40.729280]\n\n    return ( \n            <div id=\"map\" className=\"bikeMap\">\n                \n                 <Map\n                style=\"mapbox://styles/maxbert/ckgbrx0yf02n81ap37uzl3pke/draft\"\n                containerStyle={{\n                    height: '100%',\n                    width: '100%'\n                }}\n                center={[-73.9820, 40.72878]}\n                zoom={[15.5]}\n                bearing={[29.1]}\n                >\n                {\n                    stations.map((station, index) => {\n                        if(station.lon < me[0] + 0.015 &&\n                            station.lon > me[0] - 0.015 &&\n                            station.lat <  me[1] + 0.015 &&\n                            station.lat > me[1] - 0.015\n                            ) {\n                         console.log(station.station_id)\n                         return <Marker coordinates={[station.lon, station.lat]}>\n                            <BikeMarker \n                            id={station.station_id}\n                            enum={stationInfo[index]?.num_ebikes_available}\n                            num={stationInfo[index]?.num_bikes_available}\n                            />\n                        </Marker>\n                            }\n                    }\n                    )\n                }\n                </Map>\n            </div>\n    );\n}\n\nexport default BikeCardV2;","import React from 'react';\nimport './App.css';\nimport ClockCard from './cards/ClockCard'\nimport BikeCard from './cards/BikeCard';\nimport BusCard from './cards/BusCard';\nimport BikeCardV2 from './cards/BikeCardV2';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <div className=\"background\">\n            <BikeCardV2/>\n        </div>\n        <div className=\"items\">\n        <ClockCard />\n        <BusCard />\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}