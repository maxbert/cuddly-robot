{"version":3,"sources":["cards/ClockCard.js","cards/BikeCard.js","cards/BusCard.js","App.js","serviceWorker.js","index.js"],"names":["ClockCard","Grid","className","compressor","format","interval","ticking","BikeCard","useState","iframeKey","setIframeKey","hasSetMapStorage","setHasSetMapStorage","setInterval","setMapStorage","key","value","setTimeout","document","getElementById","srcdoc","slice","length","console","log","useEffect","is","id","src","style","height","width","border","BusCard","nextBus","setNextBus","saturdayX28Schedule","sundayX28Schedule","weekdayX28Schedule","refresh","nextBusTime","dayjs","day","find","time","App","container","item","xs","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wUAiBeA,MAZf,WACI,OACQ,kBAACC,EAAA,EAAD,CAAMC,UAAU,aAChB,kBAAC,IAAD,CAAcC,WAAY,IAC1B,4BACA,kBAAC,IAAD,CAAOC,OAAO,WAAWC,SAAU,IAAMC,SAAS,Q,aCkC/CC,MAzCf,WAAsB,IAAD,EACiBC,mBAAS,GAD1B,mBACVC,EADU,KACCC,EADD,OAE+BF,oBAAS,GAFxC,mBAEVG,EAFU,KAEQC,EAFR,KAIjBC,aAAY,WAAOH,EAAaD,EAAY,KAAK,KAEjD,IAAMK,EAAgB,SAACC,EAAKC,GACxBC,YAAW,WACXC,SAASC,eAAe,WAAWC,OACnCF,SAASC,eAAe,WAAWC,OAAOC,MAAM,EAAG,IACnD,iCAAoCN,EAAM,MAAUC,EAAS,eAC7DE,SAASC,eAAe,WAAWC,OAAOC,MACtC,GACAH,SAASC,eAAe,WAAWC,OAAOE,QAE9CC,QAAQC,IAAI,SACT,MAWP,OARAC,qBAAU,WACNX,EAAc,wBAAwB,mBACtCA,EAAc,yBAAyB,sBACvCA,EAAc,oBAAoB,MAClCF,GAAoB,KACrB,CAACD,IAII,yBAAKT,UAAU,WACf,4BACIwB,GAAG,iBACHC,GAAG,UACHzB,UAAU,UACVa,IAAKN,EACLmB,IAAI,sCACJC,MAAO,CAACC,OAAO,OAAQC,MAAM,OAAQC,OAAO,Y,uBCiF7CC,MAlHf,WAAqB,IAAD,EACczB,mBAAS,IADvB,mBACT0B,EADS,KACAC,EADA,KAGVC,EAAsB,CACxB,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,SAGEC,EAAoB,CACtB,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,SAGEC,EAAqB,CACvB,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,SAGEC,EAAU,WACZhB,QAAQC,IAAI,aACZ,IAAKgB,EAAc,GACnB,OAAOC,MAAQC,OACX,KAAK,EACDF,EAAcG,eAAKN,GAAmB,SAAAO,GAAI,OAAIH,MAAQrC,OAAO,SAAWwC,KACxE,MACJ,KAAK,EACDJ,EAAcG,eAAKP,GAAqB,SAAAQ,GAAI,OAAIH,MAAQrC,OAAO,SAAWwC,KAC1E,MACJ,QACIJ,EAAcG,eAAKL,GAAoB,SAAAM,GAAI,OAAIH,MAAQrC,OAAO,SAAWwC,KAEjFrB,QAAQC,IAAI,oBAAqBgB,GACjCL,EAAWK,IAUf,OAPAf,oBAAUc,GAKV1B,aAAY,WAAO0B,MAAY,KAGvB,yBAAKrC,UAAU,cAAf,uBACwBgC,IC3FrBW,MAhBf,WACE,OACE,yBAAK3C,UAAU,OACb,kBAACD,EAAA,EAAD,CAAM6C,WAAS,GACb,kBAAC7C,EAAA,EAAD,CAAM8C,MAAI,EAACC,GAAI,GACb,kBAAC,EAAD,OAEF,kBAAC/C,EAAA,EAAD,CAAM8C,MAAI,EAACC,GAAI,GACb,kBAAC,EAAD,CAAWnB,MAAO,CAACC,OAAO,SAC1B,kBAAC,EAAD,CAASD,MAAO,CAACC,OAAO,aCJdmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtC,SAASC,eAAe,SDyHpB,kBAAmBsC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.27d2ac22.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Clock from 'react-live-clock';\nimport ReactFitText from 'react-fittext'\nimport './styles/SubwayCard.css';\nfunction ClockCard () {\n    return ( \n            <Grid className=\"clockCard\">\n            <ReactFitText compressor={0.4}>\n            <h1>\n            <Clock format=\"hh:mm:ss\" interval={1000} ticking={true} />\n            </h1>\n            </ReactFitText>\n            </Grid>\n    );\n}\n\nexport default ClockCard;","import React, {useState, useEffect} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport './styles/BikeCard.css';\nfunction BikeCard () {\n    const [iframeKey, setIframeKey] = useState(0);\n    const [hasSetMapStorage, setHasSetMapStorage] = useState(false);\n    //refresh every ten minutes\n    setInterval(() => {setIframeKey(iframeKey + 1)}, 600000)\n\n    const setMapStorage = (key, value) => {\n        setTimeout(() => {\n        document.getElementById(\"bikeMap\").srcdoc = \n        document.getElementById(\"bikeMap\").srcdoc.slice(0, 85) + \n        \"<script>localStorage.setItem(\\\"\" + key + \"\\\",\\\"\" + value +  \"\\\")</script>\" + \n        document.getElementById(\"bikeMap\").srcdoc.slice(\n            85,\n            document.getElementById(\"bikeMap\").srcdoc.length\n        )\n        console.log('ran')\n        }, 5000)\n    }\n\n    useEffect(()=> {\n        setMapStorage(\"edMapStorage_latitude\",\"40.725063622053\")\n        setMapStorage(\"edMapStorage_longitude\",\"-73.98508664020494\")\n        setMapStorage(\"edMapStorage_zoom\",\"15\")\n        setHasSetMapStorage(true)\n    }, [hasSetMapStorage])\n\n    \n    return ( \n            <div className=\"bikeMap\">\n            <iframe\n                is=\"x-frame-bypass\"\n                id=\"bikeMap\"\n                className=\"bikeMap\"\n                key={iframeKey}\n                src=\"https://member.citibikenyc.com/map/\"\n                style={{height:'100%', width:'100%', border:'none'}}\n            />\n            </div>\n    );\n}\n\nexport default BikeCard;","import React, {useState, useEffect} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport dayjs from 'dayjs'\nimport { find } from 'lodash'\nimport './styles/SubwayCard.css';\nfunction BusCard () {\n    const [nextBus, setNextBus] = useState(\"\");\n\n    const saturdayX28Schedule = [\n        \"07:52\",\n        \"08:51\",\n        \"09:26\",\n        \"09:56\",\n        \"10:26\",\n        \"10:56\",\n        \"11:26\",\n        \"12:00\",\n        \"12:35\",\n        \"13:20\",\n        \"14:20\",\n        \"15:21\",\n        \"16:21\",\n        \"17:05\",\n        \"17:37\",\n        \"18:07\",\n        \"18:36\",\n        \"19:06\",\n        \"19:35\",\n        \"20:05\",\n        \"20:37\",\n        \"21:22\",\n        \"10:21\"\n    ]\n\n    const sundayX28Schedule = [\n        \"08:50\",\n        \"09:50\",\n        \"10:50\",\n        \"11:52\",\n        \"11:42\",\n        \"13:34\",\n        \"14:09\",\n        \"14:39\",\n        \"15:09\",\n        \"15:39\",\n        \"16:10\",\n        \"16:41\",\n        \"17:11\",\n        \"17:41\",\n        \"18:11\",\n        \"18:41\",\n        \"19:10\",\n        \"19:44\",\n        \"20:23\",\n        \"21:23\"\n    ]\n\n    const weekdayX28Schedule = [\n        \"09:34\",\n        \"10:34\",\n        \"11:34\",\n        \"12:30\",\n        \"13:20\",\n        \"14:05\",\n        \"14:45\",\n        \"15:15\",\n        \"15:35\",\n        \"15:50\",\n        \"16:16\",\n        \"16:36\",\n        \"16:55\",\n        \"17:11\",\n        \"17:27\",\n        \"17:46\",\n        \"18:09\",\n        \"18:39\",\n        \"18:51\",\n        \"19:05\",\n        \"19:21\",\n        \"19:40\",\n        \"20:00\",\n        \"20:22\",\n        \"20:49\",\n        \"21:18\",\n        \"22:31\",\n        \"23:46\"\n    ]\n\n    const refresh = () => {\n        console.log(\"refresehd\")\n        let  nextBusTime = \"\";\n        switch(dayjs().day()){\n            case 0:\n                nextBusTime = find(sundayX28Schedule, time => dayjs().format(\"HH:mm\") < time)\n                break;\n            case 1:\n                nextBusTime = find(saturdayX28Schedule, time => dayjs().format(\"HH:mm\") < time)\n                break;\n            default:\n                nextBusTime = find(weekdayX28Schedule, time => dayjs().format(\"HH:mm\") < time)\n        }\n        console.log(\"next bus time is \", nextBusTime)\n        setNextBus(nextBusTime)\n    }\n    \n    useEffect(refresh)\n\n\n\n    //refresh every minute\n    setInterval(() => {refresh()}, 60000)\n\n    return ( \n            <div className=\"subwayTime\">\n               The next x28 is at: {nextBus}\n            </div>\n    );\n}\n\nexport default BusCard;","import React from 'react';\nimport './App.css';\nimport Grid from '@material-ui/core/Grid';\nimport ClockCard from './cards/ClockCard'\nimport BikeCard from './cards/BikeCard';\nimport BusCard from './cards/BusCard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Grid container>\n        <Grid item xs={6}>\n          <BikeCard/>\n        </Grid>\n        <Grid item xs={6}>\n          <ClockCard style={{height:\"50%\"}}/>\n          <BusCard style={{height:\"50%\"}}/>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}